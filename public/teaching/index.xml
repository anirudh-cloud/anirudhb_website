<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teachings on AMKS</title>
    <link>https://www.amks.me/teaching/</link>
    <description>Recent content in Teachings on AMKS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>amk © 2020</copyright>
    <lastBuildDate>Tue, 08 Dec 2020 18:02:07 -0800</lastBuildDate>
    
	<atom:link href="https://www.amks.me/teaching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What, Really, Are Promises?</title>
      <link>https://www.amks.me/teaching/promises/</link>
      <pubDate>Tue, 08 Dec 2020 18:02:07 -0800</pubDate>
      
      <guid>https://www.amks.me/teaching/promises/</guid>
      <description>Recently, I was asked to recreate the Promise class in one of my interviews. I was taken aback by the question, and it took me a good couple minutes before I cooked up some form of an answer. Big fail.
This is my redemption. Let&amp;rsquo;s go ahead and write a minified version of the Promise class.
The Promise Class: A Quick Recap If you&amp;rsquo;re unfamiliar with Promises, I&amp;rsquo;d highly consider checking out this wonderful guide.</description>
    </item>
    
    <item>
      <title>How To Practise For CS Classes</title>
      <link>https://www.amks.me/teaching/cs61a-practise/</link>
      <pubDate>Wed, 21 Oct 2020 14:52:27 -0700</pubDate>
      
      <guid>https://www.amks.me/teaching/cs61a-practise/</guid>
      <description>So, you wanna do practise questions? That&amp;rsquo;s great! I&amp;rsquo;m glad you&amp;rsquo;re actively engaging with the material and trying to do better.
However, there&amp;rsquo;s a pitfall to doing practise questions that I want you to be aware of.
Just Doing Practise Questions Is Harmful The way I started doing practise tests was quite straightforward. Print the exam, do it best I could, then check answers for where there were mistakes. Try not to make those mistakes again.</description>
    </item>
    
    <item>
      <title>Types of APIs</title>
      <link>https://www.amks.me/teaching/apis/</link>
      <pubDate>Sat, 17 Oct 2020 17:49:51 -0700</pubDate>
      
      <guid>https://www.amks.me/teaching/apis/</guid>
      <description>If you&amp;rsquo;re at all interested in back-end web development, then you&amp;rsquo;ve heard of APIs –– but what are they really?
What are APIs? Imagine that we want to make available data about movies. getLastBlockbuster() returns the last big cinema hit, movieRating(&#39;Parasite&#39;) returns the imdb rating of the movie Parasite, and so on. This would be a very cool tool to give movie enthusiasts! So you go ahead and write this. How do we make this available to users?</description>
    </item>
    
    <item>
      <title>How Does Control Flow In Python?</title>
      <link>https://www.amks.me/teaching/cs61a-control/</link>
      <pubDate>Sat, 17 Oct 2020 17:33:05 -0700</pubDate>
      
      <guid>https://www.amks.me/teaching/cs61a-control/</guid>
      <description>To understand everything that 61A is trying to teach you, its important to understand the fundamental idea that everything is based on –– how are Python programs executed?
Direct Control Flow In the simplest of functions, control simply flows downward.
a = 3 print(a) # prints 3 The reason this works is because the control goes up to down –– 3 is bound to a, and then looked up in line 2.</description>
    </item>
    
  </channel>
</rss>