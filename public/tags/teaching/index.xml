<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>teaching on AMKS</title>
    <link>https://www.amks.me/tags/teaching/</link>
    <description>Recent content in teaching on AMKS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>amk © 2020</copyright>
    <lastBuildDate>Tue, 08 Dec 2020 18:02:07 -0800</lastBuildDate>
    
	<atom:link href="https://www.amks.me/tags/teaching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recreating Promises in Javascript</title>
      <link>https://www.amks.me/blog/promises/</link>
      <pubDate>Tue, 08 Dec 2020 18:02:07 -0800</pubDate>
      
      <guid>https://www.amks.me/blog/promises/</guid>
      <description>The Promise class is one of the most notoriously black-boxed tools in Javascript. How does the promise class manage asynchronicity, when Javascript is single-threaded?
I made a small Promise class to try to understand. The complete implementation is at the end of this article.
This article assumes some familiarity with the concept of Promises. If you&amp;rsquo;re unfamiliar with Promises, I&amp;rsquo;d highly consider checking out this wonderful guide.
The Specification To focus on core concepts, we&amp;rsquo;ll assume that our Promises always resolve and return a value.</description>
    </item>
    
    <item>
      <title>The React Breakdown, Part I</title>
      <link>https://www.amks.me/blog/react1/</link>
      <pubDate>Tue, 08 Dec 2020 17:02:40 -0800</pubDate>
      
      <guid>https://www.amks.me/blog/react1/</guid>
      <description>This series of notes was used to teach students at Berkeley in the fall of 2020.
Unlike many other tutorials across the internet, this tutorial uses a bottom-up approach to React, going through the basics of different react functionalities before implementing them. It pulls back the layer of abstraction around React tools to deeply understand how they work.
What is React? React is a declarative, efficient, and flexible JavaScript library for building user interfaces.</description>
    </item>
    
    <item>
      <title>How To Practise For CS Classes</title>
      <link>https://www.amks.me/blog/cs61a-practise/</link>
      <pubDate>Wed, 21 Oct 2020 14:52:27 -0700</pubDate>
      
      <guid>https://www.amks.me/blog/cs61a-practise/</guid>
      <description>So, you wanna do practise questions? That&amp;rsquo;s great! I&amp;rsquo;m glad you&amp;rsquo;re actively engaging with the material and trying to do better.
However, there&amp;rsquo;s a pitfall to doing practise questions that I want you to be aware of.
Just Doing Practise Questions Is Harmful The way I started doing practise tests was quite straightforward. Print the exam, do it best I could, then check answers for where there were mistakes. Try not to make those mistakes again.</description>
    </item>
    
    <item>
      <title>Types of APIs</title>
      <link>https://www.amks.me/blog/apis/</link>
      <pubDate>Sat, 17 Oct 2020 17:49:51 -0700</pubDate>
      
      <guid>https://www.amks.me/blog/apis/</guid>
      <description>If you&amp;rsquo;re at all interested in back-end web development, then you&amp;rsquo;ve heard of APIs –– but what are they really?
What are APIs? Imagine that we want to make available data about movies. getLastBlockbuster() returns the last big cinema hit, movieRating(&#39;Parasite&#39;) returns the imdb rating of the movie Parasite, and so on. This would be a very cool tool to give movie enthusiasts! So you go ahead and write this. How do we make this available to users?</description>
    </item>
    
    <item>
      <title>How Does Control Flow In Python?</title>
      <link>https://www.amks.me/blog/cs61a-control/</link>
      <pubDate>Sat, 17 Oct 2020 17:33:05 -0700</pubDate>
      
      <guid>https://www.amks.me/blog/cs61a-control/</guid>
      <description>This is written for the class CS61A: The Structure and Interpretation of Computer Programs at UC Berkeley.
To understand everything that 61A is trying to teach you, its important to understand the fundamental idea that everything is based on –– how are Python programs executed?
Direct Control Flow In the simplest of functions, control simply flows downward.
a = 3 print(a) # prints 3 The reason this works is because the control goes up to down –– 3 is bound to a, and then looked up in line 2.</description>
    </item>
    
  </channel>
</rss>