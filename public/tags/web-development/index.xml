<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web-development on AMKS</title>
    <link>https://www.amks.me/tags/web-development/</link>
    <description>Recent content in web-development on AMKS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>amk © 2020</copyright>
    <lastBuildDate>Tue, 08 Dec 2020 18:02:07 -0800</lastBuildDate>
    
	<atom:link href="https://www.amks.me/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recreating Promises in Javascript</title>
      <link>https://www.amks.me/blog/promises/</link>
      <pubDate>Tue, 08 Dec 2020 18:02:07 -0800</pubDate>
      
      <guid>https://www.amks.me/blog/promises/</guid>
      <description>The Promise class is one of the most notoriously black-boxed tools in Javascript. How does the promise class manage asynchronicity, when Javascript is single-threaded?
I made a small Promise class to try to understand. The complete implementation is at the end of this article.
This article assumes some familiarity with the concept of Promises. If you&amp;rsquo;re unfamiliar with Promises, I&amp;rsquo;d highly consider checking out this wonderful guide.
The Specification To focus on core concepts, we&amp;rsquo;ll assume that our Promises always resolve and return a value.</description>
    </item>
    
    <item>
      <title>The React Breakdown, Part I</title>
      <link>https://www.amks.me/blog/react1/</link>
      <pubDate>Tue, 08 Dec 2020 17:02:40 -0800</pubDate>
      
      <guid>https://www.amks.me/blog/react1/</guid>
      <description>This series of notes was used to teach students at Berkeley in the fall of 2020.
Unlike many other tutorials across the internet, this tutorial uses a bottom-up approach to React, going through the basics of different react functionalities before implementing them. It pulls back the layer of abstraction around React tools to deeply understand how they work.
What is React? React is a declarative, efficient, and flexible JavaScript library for building user interfaces.</description>
    </item>
    
    <item>
      <title>Making My Own Clipboard</title>
      <link>https://www.amks.me/blog/clipboard/</link>
      <pubDate>Sat, 07 Nov 2020 05:31:37 -0800</pubDate>
      
      <guid>https://www.amks.me/blog/clipboard/</guid>
      <description>Last weekend, I made a private clipboard. You can play with it here and I explain the process of making it in this blog!
⌘+C. ⌘+V. I do this way too many times a day, at an instinctual level. I don&amp;rsquo;t know when I learned how to copy and paste, but it certainly feels like I&amp;rsquo;ve known it all my life. The clipboard is probably the most widely used shortcut on the keyboard.</description>
    </item>
    
    <item>
      <title>Types of APIs</title>
      <link>https://www.amks.me/blog/apis/</link>
      <pubDate>Sat, 17 Oct 2020 17:49:51 -0700</pubDate>
      
      <guid>https://www.amks.me/blog/apis/</guid>
      <description>If you&amp;rsquo;re at all interested in back-end web development, then you&amp;rsquo;ve heard of APIs –– but what are they really?
What are APIs? Imagine that we want to make available data about movies. getLastBlockbuster() returns the last big cinema hit, movieRating(&#39;Parasite&#39;) returns the imdb rating of the movie Parasite, and so on. This would be a very cool tool to give movie enthusiasts! So you go ahead and write this. How do we make this available to users?</description>
    </item>
    
    <item>
      <title>Pure CSS Solution For Dark Mode</title>
      <link>https://www.amks.me/blog/dark-mode-css/</link>
      <pubDate>Tue, 16 Jun 2020 20:50:10 -0700</pubDate>
      
      <guid>https://www.amks.me/blog/dark-mode-css/</guid>
      <description>If you&amp;rsquo;re using any node-based framework, you can use the package I created instead. I also wrote about it.
No Toggle Solution CSS provides a media query to let your website match the preference of the user.
/* Other Styles Here */ ... @media (prefers-color-scheme: dark) { h1 { color: white; } /* Other Selector Style Updates */ ... } Toggle Solution Fundamental Idea: use the CSS + selector to match sibling items with a checkbox label.</description>
    </item>
    
    <item>
      <title>Building A Dark Mode NPM Package</title>
      <link>https://www.amks.me/blog/dark-mode/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.amks.me/blog/dark-mode/</guid>
      <description>I&amp;rsquo;ve always been a light mode person. I like the cleanliness of it.
But I&amp;rsquo;ve recently developed a fascination with dark mode. It&amp;rsquo;s a feature which has been getting progressively more accepted into the internet development community. The following products went low light in the last couple years: apple, facebook, youtube, instagram, twitter, gmail, slack, soundcloud, google chrome. Here&amp;rsquo;s a convenient exhaustive list.
So I decided to add dark mode to one of my websites that I knew would get a lot of traction.</description>
    </item>
    
  </channel>
</rss>